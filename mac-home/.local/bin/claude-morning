#!/usr/bin/env bash
set -eo pipefail

# 日志
LOG_DIR="$HOME/Library/Logs"
LOG_FILE="$LOG_DIR/claude-morning.log"
mkdir -p "$LOG_DIR"

# 小工具
timestamp() { date -Iseconds; }
log() { printf '[%s] %s\n' "$(timestamp)" "$*" >> "$LOG_FILE"; }

# 配置：消息与模型（CLAUDE_MODEL 可选），默认消息“你好”。
MESSAGE="${CLAUDE_MESSAGE:-你好}"
MODEL="${CLAUDE_MODEL:-}"

# 通过 Claude Code CLI 非交互发送，避免 TTY 依赖；优先使用 PATH 中的 claude。
if ! command -v claude >/dev/null 2>&1; then
  # 尝试 Homebrew 默认路径
  if [ -x "/opt/homebrew/bin/claude" ]; then
    export PATH="/opt/homebrew/bin:$PATH"
  else
    log "ERROR: 未找到 claude CLI，请先安装并登录（claude install / claude setup-token）。"
    exit 1
  fi
fi

# 组装可选参数
CLAUDE_ARGS=(--dangerously-skip-permissions)
if [ -n "$MODEL" ]; then
  CLAUDE_ARGS+=(--model "$MODEL")
fi
# 如需固定会话，可提前导出 CLAUDE_SESSION_ID（必须是有效 UUID）
if [ -n "${CLAUDE_SESSION_ID:-}" ]; then
  CLAUDE_ARGS+=(--session-id "$CLAUDE_SESSION_ID")
fi

# 发送并记录结果（--print 为非交互模式）
set +e
output=$(claude --print --output-format text "${CLAUDE_ARGS[@]}" "$MESSAGE" 2>&1)
rc=$?
set -e
if [ "$rc" -eq 0 ]; then
  log "OK: 已用 Claude Code 发送「$MESSAGE"${MODEL:+ (model=$MODEL)}"."
  exit 0
else
  log "ERROR: claude CLI 返回码 $rc，发送失败：$output"
  exit "$rc"
fi

