#!/usr/bin/env bash
set -euo pipefail
# warp-log-session: create or read current Session-ID for Warp logs
# Usage:
#   warp-log-session [--scope global|tty|shell]           # print current session id; create if missing
#   warp-log-session --new [--scope ...]                  # force generate a new session id (replace)
#   warp-log-session --show [--scope ...]                 # same as default, print id
#   warp-log-session --help                               # usage
# Notes:
#   - Default scope: ${WARP_LOG_SESSION_SCOPE:-tty}
#   - global: one id for all tabs; tty: one id per terminal tab; shell: one id per interactive shell (PPID)

usage() {
  cat <<'USAGE'
warp-log-session [--scope global|tty|shell]
  --new       regenerate and store a new Session-ID
  --show      print current Session-ID (default)
  --scope     scope of the id: global | tty | shell (default: tty)
  --help      show this help

Session-ID format: YYYYMMDD-HHMMSS-<host>-<uuid8>
Locations by scope:
  global  ~/.config/warp/session.id
  tty     ~/.config/warp/sessions/tty-<sanitized_tty>.id
  shell   ~/.config/warp/sessions/shell-<PPID>.id
USAGE
}

scope="${WARP_LOG_SESSION_SCOPE:-tty}"
cmd="show"
# parse minimal flags
while [ $# -gt 0 ]; do
  case "$1" in
    --help) usage; exit 0;;
    --new) cmd="new"; shift;;
    --show) cmd="show"; shift;;
    --scope) scope="${2:-}"; shift 2;;
    *) echo "unknown arg: $1" >&2; usage; exit 1;;
  esac
done

# resolve session file by scope
resolve_file() {
  case "$scope" in
    global)
      echo "$HOME/.config/warp/session.id";;
    tty)
      local t; t=$(tty 2>/dev/null || true)
      if [ -z "$t" ] || [[ "$t" == *"not a tty"* ]]; then
        echo "$HOME/.config/warp/session.id"; return
      fi
      local s; s=$(printf '%s' "$t" | sed 's/[^a-zA-Z0-9._-]/_/g')
      echo "$HOME/.config/warp/sessions/tty-$s.id";;
    shell)
      local ppid; ppid=${PPID:-0}
      if [ "$ppid" -eq 0 ]; then echo "$HOME/.config/warp/session.id"; return; fi
      echo "$HOME/.config/warp/sessions/shell-$ppid.id";;
    *) echo "$HOME/.config/warp/session.id";;
  esac
}

SESSION_FILE="$(resolve_file)"
mkdir -p "$(dirname "$SESSION_FILE")"

if [ "$cmd" = "new" ]; then
  ts=$(TZ=Asia/Shanghai date +%Y%m%d-%H%M%S)
  host=$(scutil --get LocalHostName 2>/dev/null || hostname)
  rand=$(uuidgen | tr -d '-' | tr 'A-Z' 'a-z' | head -c8)
  sid="${ts}-${host}-${rand}"
  printf "%s" "$sid" >"$SESSION_FILE"
  printf "%s\n" "$sid"
  exit 0
fi

# show
if [ -s "$SESSION_FILE" ]; then
  cat "$SESSION_FILE"
  exit 0
fi
# create if missing (reuse same scope)
"$0" --new --scope "$scope"

