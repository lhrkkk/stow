#!/usr/bin/env zsh
# Recompile zsh-related scripts to .zwc for faster startup
# - Compiles Zim modules, Zim init, your zsh files, and .zcompdump

emulate -L zsh
setopt err_return
setopt extended_glob

# Support a clean option: remove generated .zwc caches
if [[ ${1:-} == clean || ${1:-} == --clean || ${1:-} == -c ]]; then
  typeset -a targets
  targets=(
    # env and zsh configs
    "$HOME/.config/env"/**/*.zwc(.N)
    "$HOME/.config/env"/**/*.zwc.old(.N)
    "$HOME/.config/zsh"/**/*.zwc(.N)
    "$HOME/.config/zsh"/**/*.zwc.old(.N)
    # zim caches
    "$HOME/.zim"/**/*.zwc(.N)
    "$HOME/.zim"/**/*.zwc.old(.N)
    # top-level common caches
    "$HOME/.zshrc.zwc"(N)
    "$HOME/.zshrc.zwc.old"(N)
    "${ZDOTDIR:-$HOME}"/.zcompdump*.zwc(.N)
    "${ZDOTDIR:-$HOME}"/.zcompdump*.zwc.old(.N)
  )

  typeset -i removed=0 skipped=0
  for t in "${targets[@]}"; do
    if [[ -e $t ]]; then
      rm -f -- "$t" && removed+=1 || skipped+=1
    else
      skipped+=1
    fi
  done

  # If available, ask zimfw to clean its compiled files (ignore failures)
  if (( $+commands[zimfw] )); then
    zimfw clean -q >/dev/null 2>&1 || true
  fi

  # After cleaning, proactively regenerate completion dump so compsys works (incl. fzf)
  dump="${ZDOTDIR:-$HOME}/.zcompdump"
  typeset -a _extra_fpath
  if (( $+commands[brew] )); then
    local _bp
    _bp=$(brew --prefix 2>/dev/null) || _bp=""
    [[ -n $_bp && -d $_bp/share/zsh/site-functions ]] && _extra_fpath+=("$_bp/share/zsh/site-functions")
    [[ -f "$_bp/opt/fzf/shell/completion.zsh" ]] && source "$_bp/opt/fzf/shell/completion.zsh"
  fi
  [[ -d /opt/homebrew/share/zsh/site-functions ]] && _extra_fpath+=(/opt/homebrew/share/zsh/site-functions)
  [[ -d /usr/local/share/zsh/site-functions ]] && _extra_fpath+=(/usr/local/share/zsh/site-functions)
  [[ -d /usr/share/zsh/site-functions ]] && _extra_fpath+=(/usr/share/zsh/site-functions)
  fpath=( ${_extra_fpath[@]} $fpath )
  autoload -Uz compinit
  compinit -d "$dump" -i >/dev/null 2>&1 || compinit -i >/dev/null 2>&1
  [[ -f "$dump" ]] && zcompile "$dump" || true

  print -r -- "Clean done: removed=$removed skipped=$skipped; regenerated .zcompdump"
  return 0
fi

# 1) Compile Zim modules (if zimfw is available)
if (( $+commands[zimfw] )); then
  zimfw compile -q
fi

# 2) Compile Zim top-level init (gives noticeable benefit)
if [[ -f "$HOME/.zim/init.zsh" ]]; then
  if [[ ! -f "$HOME/.zim/init.zsh.zwc" || "$HOME/.zim/init.zsh" -nt "$HOME/.zim/init.zsh.zwc" ]]; then
    zcompile "$HOME/.zim/init.zsh"
  fi
fi

# 3) Compile your zsh configs and functions (only when needed)
autoload -Uz zrecompile
typeset -a files
files=(
  "$HOME/.zshrc"
  "$HOME/.config/zsh/zshrc"
  "$HOME/.config/zsh"/*.zsh(N)
  # 编译 functions 目录下的所有普通文件（包含无扩展名的函数文件）
  "$HOME/.config/zsh/functions"/*(.N)
  # 递归编译 env 目录下的所有 .sh 和 .zsh 文件（包含子目录）
  "$HOME/.config/env"/**/*.zsh(N)
  "$HOME/.config/env"/**/*.sh(N)
)

typeset -i compiled=0 skipped=0
for f in "${files[@]}"; do
  [[ -e "$f" ]] || continue
  if [[ ! -e "$f.zwc" || "$f" -nt "$f.zwc" ]]; then
    zrecompile -pq -- "$f" && compiled+=1
  else
    skipped+=1
  fi
done

# 4) Ensure and compile completion dump
dump="${ZDOTDIR:-$HOME}/.zcompdump"
# If dump is missing, generate it, ensuring common site-functions are in fpath
if [[ ! -f "$dump" ]]; then
  # Make sure common Homebrew and system site-functions are available
  typeset -a _extra_fpath
  if (( $+commands[brew] )); then
    local _bp
    _bp=$(brew --prefix 2>/dev/null) || _bp=""
    [[ -n $_bp && -d $_bp/share/zsh/site-functions ]] && _extra_fpath+=("$_bp/share/zsh/site-functions")
    # Also try fzf completion script if installed via Homebrew
    if [[ -f "$_bp/opt/fzf/shell/completion.zsh" ]]; then
      source "$_bp/opt/fzf/shell/completion.zsh"
    fi
  fi
  [[ -d /opt/homebrew/share/zsh/site-functions ]] && _extra_fpath+=(/opt/homebrew/share/zsh/site-functions)
  [[ -d /usr/local/share/zsh/site-functions ]] && _extra_fpath+=(/usr/local/share/zsh/site-functions)
  [[ -d /usr/share/zsh/site-functions ]] && _extra_fpath+=(/usr/share/zsh/site-functions)
  fpath=( ${_extra_fpath[@]} $fpath )

  autoload -Uz compinit
  # Use -d to write to our desired dump path; -i to skip insecure dirs prompts
  compinit -d "$dump" -i >/dev/null 2>&1 || compinit -i >/dev/null 2>&1
fi
# Once present, (re)compile if stale or missing .zwc
if [[ -f "$dump" ]]; then
  if [[ ! -f "$dump.zwc" || "$dump" -nt "$dump.zwc" ]]; then
    zcompile "$dump"
  fi
fi

print -r -- "Recompile done: compiled=$compiled skipped=$skipped"
